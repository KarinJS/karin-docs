import{_ as p,c as r,j as e,a as l,G as a,ap as s,w as d,B as o,o as h}from"./chunks/framework.uLKXR9Uu.js";const P=JSON.parse('{"title":"开发规范","description":"","frontmatter":{},"headers":[],"relativePath":"plugins/standard.md","filePath":"plugins/standard.md","lastUpdated":1724465663000}'),k={name:"plugins/standard.md"},u={class:"tip custom-block"};function g(E,i,m,b,f,q){const t=o("NolebasePageProperties"),n=o("VPNolebaseInlineLinkPreview"),c=o("NolebaseGitChangelog");return h(),r("div",null,[i[7]||(i[7]=e("h1",{id:"开发规范",tabindex:"-1"},[l("开发规范 "),e("a",{class:"header-anchor",href:"#开发规范","aria-label":'Permalink to "开发规范"'},"​")],-1)),a(t),i[8]||(i[8]=s('<h2 id="命名规范" tabindex="-1">命名规范 <a class="header-anchor" href="#命名规范" aria-label="Permalink to &quot;命名规范&quot;">​</a></h2><h3 id="git插件包" tabindex="-1">Git插件包 <a class="header-anchor" href="#git插件包" aria-label="Permalink to &quot;Git插件包&quot;">​</a></h3><blockquote><p><strong>这里必须遵守，否则将无法被karin识别启用</strong></p></blockquote><ul><li>插件包名称必须以 <code>karin-plugin-</code> 开头，后面跟插件名称</li><li>必须使用英文命名，尽量简短，避免使用特殊符号</li><li>统一为小写，使用 <code>-</code> 连接单词</li></ul><p>例如：<code>kritor-plugin-hello</code> 、<code>karin-plugin-my-plugin</code> 、<code>karin-plugin-my-awesome-plugin</code></p><h3 id="单个js" tabindex="-1">单个<code>js</code> <a class="header-anchor" href="#单个js" aria-label="Permalink to &quot;单个`js`&quot;">​</a></h3><blockquote><p>这里是推荐规范，不强制要求<br> 一般情况下 不建议另外再创建一个同样功能的 <code>karin-plugin-example</code> 文件夹。</p></blockquote><ul><li>统一存放在 <code>karin</code> 提供的 <code>karin-plugin-example</code></li><li>使用英文进行命名，无固定前缀要求</li><li>名称尽量简短，避免过长</li><li>名称避免使用特殊符号，使用 <code>-</code> 连接单词</li></ul><p>例如：<code>hello-world.js</code> 、<code>my-plugin.js</code> 、<code>my-awesome-plugin.js</code></p><h2 id="结构规范" tabindex="-1">结构规范 <a class="header-anchor" href="#结构规范" aria-label="Permalink to &quot;结构规范&quot;">​</a></h2>',10)),e("div",u,[i[3]||(i[3]=e("p",{class:"custom-block-title"},"TIP",-1)),e("p",null,[i[1]||(i[1]=l("建议直接使用 ")),a(n,{href:"https://github.com/KarinJS/karin-plugin-template",target:"_blank",rel:"noreferrer"},{default:d(()=>i[0]||(i[0]=[e("strong",null,"模板仓库",-1)])),_:1}),i[2]||(i[2]=l(" 进行开发"))])]),i[9]||(i[9]=s(`<blockquote><p>插件包的目录结构，请参照以下规范进行组织，开发者可自行在基础结构上进行调整</p></blockquote><h3 id="文件结构" tabindex="-1">文件结构 <a class="header-anchor" href="#文件结构" aria-label="Permalink to &quot;文件结构&quot;">​</a></h3><div class="tip custom-block"><p class="custom-block-title">TIP</p><p>以下是一个基础的结构规范，具体项目可根据实际情况进行调整</p></div><div class="language-md vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">md</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">kritor-plugin-hello</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── apps</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│ ├── app1.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│ └── app2.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── config</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│ ├── config</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│ │ ├── config.yaml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│ │ └── user.yaml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│ └── defSet</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│ ├── config.yaml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│ └── user.yaml</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── resources</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│ ├── template</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│ ├── font</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│ ├── icon</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│ ├── image</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">│ └── css</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── lib</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── model</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── index.js</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── .gitignore</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── README.md</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── CHANGELOG.md</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">├── LICENSE</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">└──package.json</span></span></code></pre></div><h3 id="数据文件" tabindex="-1">数据文件 <a class="header-anchor" href="#数据文件" aria-label="Permalink to &quot;数据文件&quot;">​</a></h3><div class="warning custom-block"><p class="custom-block-title">警告</p><p><strong>这里请必须遵守</strong></p></div><ul><li>对于 <code>数据文件</code> ，karin要求开发者将数据文件 <code>统一</code> 存放到 <code>data/</code> 下</li><li><code>karin</code> 会在启动的时候，为每一个插件包在 <code>data/</code> 下创建 <code>对应名称</code> 的文件夹</li><li>如无特殊需求，请不要在 <code>data</code> 文件夹下创建其他文件夹</li></ul><p>问：为什么要求统一存放数据文件？<br> 答：方便 <code>karin</code> 统一管理，方便用户 <code>查找</code>、<code>迁移</code> 、快速 <code>备份</code> 。</p><p>问：什么样的算数据文件？<br> 答：如 <code>Cookie</code> 、<code>Token</code> 、<code>sqlite</code> 、<code>mysql</code> 等数据文件，不包含 <code>配置文件</code> 、<code>资源文件</code> 。</p><h3 id="配置文件" tabindex="-1">配置文件 <a class="header-anchor" href="#配置文件" aria-label="Permalink to &quot;配置文件&quot;">​</a></h3><blockquote><p>无需一定遵守，但是推荐遵守</p></blockquote><ul><li>对于配置文件，由于使用 <code>git</code> 进行管理升级，所以一般会有两种配置文件：<code>默认配置</code> 和 <code>用户配置</code></li><li><code>Git默认配置</code> ：要求统一存放在插件自身的 <code>karin/plugin/&lt;plugin_name&gt;config/</code> 下，由开发者进行维护修改，此处禁止用户编辑修改。</li><li><code>Npm默认配置</code> ：要求统一存放在插件自身的 <code>karin/node_modules/&lt;plugin_name&gt;config/</code> 下，由开发者进行维护修改，此处禁止用户编辑修改。</li><li><code>用户配置</code> ：要求统一存放在 <code>karin/config/plugin/&lt;plugin_name&gt;</code> 下，由用户进行编辑修改。</li><li>如无特殊需求，请不要在 <code>config</code> 文件夹下创建其他文件夹</li></ul>`,12)),e("blockquote",null,[e("p",null,[i[5]||(i[5]=l("对于这里，建议使用 ")),a(n,{href:"#结构规范"},{default:d(()=>i[4]||(i[4]=[e("strong",null,[e("code",null,"karin-plugin-template")],-1)])),_:1}),i[6]||(i[6]=l(" 作为模板，进行开发"))])]),i[10]||(i[10]=s('<h3 id="资源文件" tabindex="-1">资源文件 <a class="header-anchor" href="#资源文件" aria-label="Permalink to &quot;资源文件&quot;">​</a></h3><blockquote><p>任选其一即可，以下是两种常见的规范，无需一定遵守</p></blockquote><p>规范1:</p><ul><li>插件包的资源文件</li><li>字体文件存放在 <code>resources/font/</code> 下</li><li>图片文件存放在 <code>resources/image/</code> 下</li><li>图标文件存放在 <code>resources/icon/</code> 下</li><li>通用样式文件存放在 <code>resources/css/</code> 下</li><li>渲染模板存放在 <code>resources/template/</code> 下，每一种模板新建一个文件夹</li></ul><p>规范2:</p><ul><li>每一种渲染模板都在 <code>resources</code> 下新建一个文件夹，文件夹名称为模板名称，将模板的资源文件存放在该文件夹下</li></ul><h3 id="临时文件" tabindex="-1">临时文件 <a class="header-anchor" href="#临时文件" aria-label="Permalink to &quot;临时文件&quot;">​</a></h3><ul><li>karin会在启动的时候，在 <code>karin/temp</code> 下为每一个插件包创建对应名称的文件夹</li><li>开发者可在该文件夹下存放临时文件，如缓存文件、日志文件等</li><li>请勿对他人的文件夹进行删除、修改</li><li>如无特殊需求，请不要在该文件夹下创建其他文件夹。</li></ul><h3 id="html渲染模板" tabindex="-1">html渲染模板 <a class="header-anchor" href="#html渲染模板" aria-label="Permalink to &quot;html渲染模板&quot;">​</a></h3><ul><li>karin会在启动的时候，在 <code>karin/temp/html</code> 下为每一个插件包创建对应名称的文件夹</li><li>请开发者在使用渲染的时候，将 <code>name</code> 设置为 <code>插件包名称</code></li></ul><h2 id="仓库规范" tabindex="-1">仓库规范 <a class="header-anchor" href="#仓库规范" aria-label="Permalink to &quot;仓库规范&quot;">​</a></h2><ul><li>要求插件仓库名称必须以 <code>karin-plugin-</code> 开头，必须与插件包名称一致</li><li>插件仓库必须提供开源协议</li><li>在仓库标签页，添加 <code>karin</code> 、<code>karin-plugin</code></li><li>对于二改的 <code>karin</code> 仓库，必须进行开源，并使用 <code>GPLv3+</code> 协议，并使用 <code>karin</code> 标签进行标记</li></ul><h2 id="多媒体资源规范" tabindex="-1">多媒体资源规范 <a class="header-anchor" href="#多媒体资源规范" aria-label="Permalink to &quot;多媒体资源规范&quot;">​</a></h2><ul><li>网络资源： <ul><li>必须携带 <code>http</code> 或 <code>https</code> 协议</li><li>如：<code>https://www.example.com/image.png</code></li></ul></li><li>本地资源： <ul><li>必须携带 <code>file</code> 协议</li><li>必须使用 <code>file://</code> 开头，禁止使用 <code>file:///</code> 开头</li><li>同一服务器环境跨应用传输，比如使用 <code>绝对路径</code></li><li>如：<code>file://D:/example/image.png</code> 、<code>file:///root/image.png</code></li></ul></li><li><code>base64</code> : <ul><li>必须使用 <code>base64://</code> 开头</li><li>不要携带 <code>data:image/png;base64,</code>等前缀</li><li>如：<code>base64://iVBORw0KGAYAAR42mL8//8/AyUYw ...</code></li></ul></li></ul><h2 id="基本规范" tabindex="-1">基本规范 <a class="header-anchor" href="#基本规范" aria-label="Permalink to &quot;基本规范&quot;">​</a></h2><ul><li><p>建议开发者在仓库主页添加 <em><strong>免责声明</strong></em></p></li><li><p>对于 <code>开源</code> 插件，必须提供 <code>开源协议</code>。</p></li><li><p>对于 <code>闭源</code> 插件，请遵守下方规则即可。</p></li><li><p>禁止存在触犯法律法规的行为</p></li><li><p>禁止存在侵犯第三方知识产权的行为</p></li><li><p>禁止存在恶意推广、恶意宣传等恶意行为</p></li><li><p>禁止存在恶意利用插件进行违法犯罪活动等恶意行为</p></li><li><p>禁止存在恶意破坏、恶意修改、恶意删除、恶意添加等恶意行为</p></li><li><p>禁止存在恶意破坏用户隐私、恶意收集用户信息等恶意行为</p></li><li><p>禁止存在恶意收集、泄露用户数据、恶意泄露用户隐私等恶意行为</p></li><li><p>禁止存在恶意修改插件的源代码、恶意删除插件的源代码等恶意行为</p></li><li><p>禁止在插件中包含任何形式的 <strong>后门</strong>、<strong>木马</strong> 、<strong>病毒</strong> 等恶意代码或程序</p></li><li><p>对于加密、混淆的插件，必须在仓库主页声明哪些文件是加密、混淆的，并注明代码混淆的目的</p></li></ul><p>问：为什么要求遵守这些规范？<br> 答：君子协议。我们希望开发者能够遵守这些规范，让 <code>karin</code> 生态更加健康，让开发者和用户更加放心。</p><p>问：为什么必须提供开源协议？<br> 答：</p><ol><li>在很多人的印象中，开源就是免费的，但是开源并不代表免费，开源是一种精神，是一种对社区的贡献，是一种对开发者的尊重。</li><li>开源协议可以保护开发者的权益，让开发者的劳动成果不被滥用。</li><li>大多数情况下，没有开源协议的插件，在产生纠纷的时候，往往双方都无法得到一个好的处理结果。</li><li>并且部分开源协议支持商业使用，开发者可实现商业化，从中获取一定的收益。</li></ol>',19)),a(c)])}const x=p(k,[["render",g]]);export{P as __pageData,x as default};
