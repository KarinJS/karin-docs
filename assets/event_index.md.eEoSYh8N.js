import{_ as s,c as d,j as a,a as t,G as o,ap as u,w as l,B as n,o as b}from"./chunks/framework.uLKXR9Uu.js";const N=JSON.parse('{"title":"事件","description":"","frontmatter":{"comment":false},"headers":[],"relativePath":"event/index.md","filePath":"event/index.md","lastUpdated":1721729057000}'),f={name:"event/index.md"};function m(p,e,c,h,P,k){const i=n("NolebasePageProperties"),r=n("VPNolebaseInlineLinkPreview");return b(),d("div",null,[e[3]||(e[3]=a("h1",{id:"事件",tabindex:"-1"},[t("事件 "),a("a",{class:"header-anchor",href:"#事件","aria-label":'Permalink to "事件"'},"​")],-1)),o(i),e[4]||(e[4]=u('<hr><h2 id="事件概述" tabindex="-1">事件概述 <a class="header-anchor" href="#事件概述" aria-label="Permalink to &quot;事件概述&quot;">​</a></h2><blockquote><p>事件是一段上报，上报也可以由插件主动触发<br> 例如插件向适配器发送请求，适配器返回结果时触发上报<br> 在大多数协议端中，事件上报基本上是通过 <code>HTTP</code>、<code>WebSocket</code>通信实现的<br> 而在karin，使用了<code>kritor</code>标准，新增了一种<code>gRPC</code>协议进行通信</p></blockquote><h2 id="消息事件" tabindex="-1">消息事件 <a class="header-anchor" href="#消息事件" aria-label="Permalink to &quot;消息事件&quot;">​</a></h2>',4)),a("ul",null,[a("li",null,[o(r,{href:"./message"},{default:l(()=>e[0]||(e[0]=[t("消息事件")])),_:1})])]),e[5]||(e[5]=a("h2",{id:"通知事件",tabindex:"-1"},[t("通知事件 "),a("a",{class:"header-anchor",href:"#通知事件","aria-label":'Permalink to "通知事件"'},"​")],-1)),a("ul",null,[a("li",null,[o(r,{href:"./notice"},{default:l(()=>e[1]||(e[1]=[t("通知事件")])),_:1})])]),e[6]||(e[6]=a("h2",{id:"请求事件",tabindex:"-1"},[t("请求事件 "),a("a",{class:"header-anchor",href:"#请求事件","aria-label":'Permalink to "请求事件"'},"​")],-1)),a("ul",null,[a("li",null,[o(r,{href:"./request"},{default:l(()=>e[2]||(e[2]=[t("请求事件")])),_:1})])])])}const v=s(f,[["render",m]]);export{N as __pageData,v as default};
